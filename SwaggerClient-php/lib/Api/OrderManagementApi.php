<?php
/**
 * OrderManagementApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LIO - Order Management API
 *
 * API de gerenciamento de pedidos da LIO.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * OrderManagementApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderManagementApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.cielo.com.br/order-management/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return OrderManagementApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation orderAddItem
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $id Identificador do pedido. (required)
     * @param \Swagger\Client\Model\OrderItem $body  (required)
     * @return \Swagger\Client\Model\Response
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderAddItem($client_id, $access_token, $merchant_id, $id, $body)
    {
        list($response) = $this->orderAddItemWithHttpInfo($client_id, $access_token, $merchant_id, $id, $body);
        return $response;
    }

    /**
     * Operation orderAddItemWithHttpInfo
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $id Identificador do pedido. (required)
     * @param \Swagger\Client\Model\OrderItem $body  (required)
     * @return Array of \Swagger\Client\Model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderAddItemWithHttpInfo($client_id, $access_token, $merchant_id, $id, $body)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling orderAddItem');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling orderAddItem');
        }
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_id when calling orderAddItem');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderAddItem');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling orderAddItem');
        }
        // parse inputs
        $resourcePath = "/orders/{id}/items";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // header params
        if ($merchant_id !== null) {
            $headerParams['merchant-id'] = $this->apiClient->getSerializer()->toHeaderValue($merchant_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Response',
                '/orders/{id}/items'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Response', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orderCreate
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param \Swagger\Client\Model\Order $body  (required)
     * @return \Swagger\Client\Model\Response
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderCreate($client_id, $access_token, $merchant_id, $body)
    {
        list($response) = $this->orderCreateWithHttpInfo($client_id, $access_token, $merchant_id, $body);
        return $response;
    }

    /**
     * Operation orderCreateWithHttpInfo
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param \Swagger\Client\Model\Order $body  (required)
     * @return Array of \Swagger\Client\Model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderCreateWithHttpInfo($client_id, $access_token, $merchant_id, $body)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling orderCreate');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling orderCreate');
        }
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_id when calling orderCreate');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling orderCreate');
        }
        // parse inputs
        $resourcePath = "/orders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // header params
        if ($merchant_id !== null) {
            $headerParams['merchant-id'] = $this->apiClient->getSerializer()->toHeaderValue($merchant_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Response',
                '/orders'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Response', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orderDelete
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $id Identificador do pedido. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderDelete($client_id, $access_token, $merchant_id, $id)
    {
        list($response) = $this->orderDeleteWithHttpInfo($client_id, $access_token, $merchant_id, $id);
        return $response;
    }

    /**
     * Operation orderDeleteWithHttpInfo
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $id Identificador do pedido. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderDeleteWithHttpInfo($client_id, $access_token, $merchant_id, $id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling orderDelete');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling orderDelete');
        }
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_id when calling orderDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderDelete');
        }
        // parse inputs
        $resourcePath = "/orders/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // header params
        if ($merchant_id !== null) {
            $headerParams['merchant-id'] = $this->apiClient->getSerializer()->toHeaderValue($merchant_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/orders/{id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orderDeleteItem
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $id Identificador do pedido. (required)
     * @param string $item_id Identificador do item do pedido. (required)
     * @return \Swagger\Client\Model\Response
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderDeleteItem($client_id, $access_token, $merchant_id, $id, $item_id)
    {
        list($response) = $this->orderDeleteItemWithHttpInfo($client_id, $access_token, $merchant_id, $id, $item_id);
        return $response;
    }

    /**
     * Operation orderDeleteItemWithHttpInfo
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $id Identificador do pedido. (required)
     * @param string $item_id Identificador do item do pedido. (required)
     * @return Array of \Swagger\Client\Model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderDeleteItemWithHttpInfo($client_id, $access_token, $merchant_id, $id, $item_id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling orderDeleteItem');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling orderDeleteItem');
        }
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_id when calling orderDeleteItem');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderDeleteItem');
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling orderDeleteItem');
        }
        // parse inputs
        $resourcePath = "/orders/{id}/items/{itemId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // header params
        if ($merchant_id !== null) {
            $headerParams['merchant-id'] = $this->apiClient->getSerializer()->toHeaderValue($merchant_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                "{" . "itemId" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Response',
                '/orders/{id}/items/{itemId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Response', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orderGet
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $id Identificador do pedido. (required)
     * @return \Swagger\Client\Model\Order
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderGet($client_id, $access_token, $merchant_id, $id)
    {
        list($response) = $this->orderGetWithHttpInfo($client_id, $access_token, $merchant_id, $id);
        return $response;
    }

    /**
     * Operation orderGetWithHttpInfo
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $id Identificador do pedido. (required)
     * @return Array of \Swagger\Client\Model\Order, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderGetWithHttpInfo($client_id, $access_token, $merchant_id, $id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling orderGet');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling orderGet');
        }
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_id when calling orderGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderGet');
        }
        // parse inputs
        $resourcePath = "/orders/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // header params
        if ($merchant_id !== null) {
            $headerParams['merchant-id'] = $this->apiClient->getSerializer()->toHeaderValue($merchant_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Order',
                '/orders/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Order', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Order', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orderGetByParameters
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $parameters Parâmetros para filtrar a consulta. Os possíveis parâmetros são: number (Número do pedidos), reference (Referência do pedido) e status (Status do pedidos: DRAFT, ENTERED, CANCELED, PAID, APPROVED, REJECTED, RE-ENTERED e CLOSED). (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderGetByParameters($client_id, $access_token, $merchant_id, $parameters)
    {
        list($response) = $this->orderGetByParametersWithHttpInfo($client_id, $access_token, $merchant_id, $parameters);
        return $response;
    }

    /**
     * Operation orderGetByParametersWithHttpInfo
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $parameters Parâmetros para filtrar a consulta. Os possíveis parâmetros são: number (Número do pedidos), reference (Referência do pedido) e status (Status do pedidos: DRAFT, ENTERED, CANCELED, PAID, APPROVED, REJECTED, RE-ENTERED e CLOSED). (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderGetByParametersWithHttpInfo($client_id, $access_token, $merchant_id, $parameters)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling orderGetByParameters');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling orderGetByParameters');
        }
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_id when calling orderGetByParameters');
        }
        // verify the required parameter 'parameters' is set
        if ($parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $parameters when calling orderGetByParameters');
        }
        // parse inputs
        $resourcePath = "/orders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($parameters !== null) {
            $queryParams['parameters'] = $this->apiClient->getSerializer()->toQueryValue($parameters);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // header params
        if ($merchant_id !== null) {
            $headerParams['merchant-id'] = $this->apiClient->getSerializer()->toHeaderValue($merchant_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/orders'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orderGetItem
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $id Identificador do pedido. (required)
     * @return \Swagger\Client\Model\OrderItem
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderGetItem($client_id, $access_token, $merchant_id, $id)
    {
        list($response) = $this->orderGetItemWithHttpInfo($client_id, $access_token, $merchant_id, $id);
        return $response;
    }

    /**
     * Operation orderGetItemWithHttpInfo
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $id Identificador do pedido. (required)
     * @return Array of \Swagger\Client\Model\OrderItem, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderGetItemWithHttpInfo($client_id, $access_token, $merchant_id, $id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling orderGetItem');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling orderGetItem');
        }
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_id when calling orderGetItem');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderGetItem');
        }
        // parse inputs
        $resourcePath = "/orders/{id}/items";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // header params
        if ($merchant_id !== null) {
            $headerParams['merchant-id'] = $this->apiClient->getSerializer()->toHeaderValue($merchant_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\OrderItem',
                '/orders/{id}/items'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\OrderItem', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\OrderItem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orderGetTransactions
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $id Identificador do pedido. (required)
     * @return \Swagger\Client\Model\Transaction
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderGetTransactions($client_id, $access_token, $merchant_id, $id)
    {
        list($response) = $this->orderGetTransactionsWithHttpInfo($client_id, $access_token, $merchant_id, $id);
        return $response;
    }

    /**
     * Operation orderGetTransactionsWithHttpInfo
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $id Identificador do pedido. (required)
     * @return Array of \Swagger\Client\Model\Transaction, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderGetTransactionsWithHttpInfo($client_id, $access_token, $merchant_id, $id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling orderGetTransactions');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling orderGetTransactions');
        }
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_id when calling orderGetTransactions');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderGetTransactions');
        }
        // parse inputs
        $resourcePath = "/orders/{id}/transactions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // header params
        if ($merchant_id !== null) {
            $headerParams['merchant-id'] = $this->apiClient->getSerializer()->toHeaderValue($merchant_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Transaction',
                '/orders/{id}/transactions'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Transaction', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Transaction', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orderUpdate
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $id Identificador do pedido. (required)
     * @param string $operation Operação que deve ser executada. As possíveis operações são: cancel (cancelamento de um pedido), close (fechamento de um pedido), place (liberação de um pedido para pagamento). (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderUpdate($client_id, $access_token, $merchant_id, $id, $operation)
    {
        list($response) = $this->orderUpdateWithHttpInfo($client_id, $access_token, $merchant_id, $id, $operation);
        return $response;
    }

    /**
     * Operation orderUpdateWithHttpInfo
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $id Identificador do pedido. (required)
     * @param string $operation Operação que deve ser executada. As possíveis operações são: cancel (cancelamento de um pedido), close (fechamento de um pedido), place (liberação de um pedido para pagamento). (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderUpdateWithHttpInfo($client_id, $access_token, $merchant_id, $id, $operation)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling orderUpdate');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling orderUpdate');
        }
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_id when calling orderUpdate');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderUpdate');
        }
        // verify the required parameter 'operation' is set
        if ($operation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $operation when calling orderUpdate');
        }
        // parse inputs
        $resourcePath = "/orders/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($operation !== null) {
            $queryParams['operation'] = $this->apiClient->getSerializer()->toQueryValue($operation);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // header params
        if ($merchant_id !== null) {
            $headerParams['merchant-id'] = $this->apiClient->getSerializer()->toHeaderValue($merchant_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/orders/{id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation orderUpdateItem
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $id Identificador do pedido. (required)
     * @param string $item_id Identificador do item do pedido. (required)
     * @param \Swagger\Client\Model\OrderItem $body  (required)
     * @return \Swagger\Client\Model\Response
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderUpdateItem($client_id, $access_token, $merchant_id, $id, $item_id, $body)
    {
        list($response) = $this->orderUpdateItemWithHttpInfo($client_id, $access_token, $merchant_id, $id, $item_id, $body);
        return $response;
    }

    /**
     * Operation orderUpdateItemWithHttpInfo
     *
     * 
     *
     * @param string $client_id Token da aplicação (APP Token) gerado durante o processo de cadastro. (required)
     * @param string $access_token Token de acesso (Access Token) gerado durante o processo de cadastro. (required)
     * @param string $merchant_id Identificador do estabelecimento comercial gerado durante o processo de cadastro. (required)
     * @param string $id Identificador do pedido. (required)
     * @param string $item_id Identificador do item do pedido. (required)
     * @param \Swagger\Client\Model\OrderItem $body  (required)
     * @return Array of \Swagger\Client\Model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function orderUpdateItemWithHttpInfo($client_id, $access_token, $merchant_id, $id, $item_id, $body)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling orderUpdateItem');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling orderUpdateItem');
        }
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_id when calling orderUpdateItem');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling orderUpdateItem');
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling orderUpdateItem');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling orderUpdateItem');
        }
        // parse inputs
        $resourcePath = "/orders/{id}/items/{itemId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // header params
        if ($merchant_id !== null) {
            $headerParams['merchant-id'] = $this->apiClient->getSerializer()->toHeaderValue($merchant_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                "{" . "itemId" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Response',
                '/orders/{id}/items/{itemId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Response', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Response', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
